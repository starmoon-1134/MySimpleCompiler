S->Start
Start->MainDef
Start->FuncList MainDef
Start->DeclareS Start
MainDef->int main ( M0 ParaList ) { Sen return Expr ; }
FuncList->FuncList FuncDef
FuncList->FuncDef
FuncDef->Type id ( M1 ParaList ) { Sen return Expr ; }
ParaList->@null
ParaList->Type ParaID
ParaList->Type ParaID , ParaList1
ParaList1->Type ParaID
ParaList1->Type ParaID , ParaList1
ParaID->id
ParaID->id [ ]
Sen->DeclareS Sen
Sen->AssignS Sen
Sen->ifS M3 Sen
Sen->whileS M3 Sen
Sen->CallS Sen
Sen->@null
CallParaList->@null
CallParaList->CallExpr
CallParaList->CallExpr , CallParaList1
CallParaList1->CallExpr
CallParaList1->CallExpr , CallParaList1
CallExpr->Expr
DeclareS->Type IDlist ;
IDlist->ID1
IDlist->ID2
IDlist->ID3
IDlist->ID1 , IDlist
IDlist->ID2 , IDlist
IDlist->ID3 , IDlist
ID1->id
ID2->id = Expr
ID3->id [ intConst ]
AssignS->id = Expr ;
AssignS->id [ Expr ] = Expr ;
Expr->Expr + Expr1
Expr->Expr - Expr1
Expr->Expr1
Expr1->Expr1 * Expr2
Expr1->Expr1 / Expr2
Expr1->Expr2
Expr2->( Expr )
Expr2->id
Expr2->Const
Expr2->id [ Expr ]
Expr2->id ( M2 CallParaList )
BoolE->BoolE1
BoolE->BoolE || M3 BoolE1
BoolE1->BoolE2
BoolE1->BoolE1 && M3 BoolE2
BoolE2->BoolE3
BoolE2->! BoolE3
BoolE3->( BoolE )
BoolE3->Expr Condop Expr
ifS->if ( BoolE ) { M3 ifSen }
ifS->if ( BoolE ) { M3 ifSen } N0 else { M3 ifSen }
ifS->if ( BoolE ) { M3 ifSen } N0 else M3 ifS
ifSen->Sen
ifSen->Sen return Expr ;
whileS->while ( M3 BoolE ) { M3 CirSen }
CallS->id ( M2 CallParaList ) ;
CirSen->DeclareS CirSen
CirSen->AssignS CirSen
CirSen->CirifS M3 CirSen
CirSen->whileS M3 CirSen
CirSen->CallS CirSen
CirSen->return Expr ;
CirSen->break ;
CirSen->continue ;
CirSen->@null
CirifS->if ( BoolE ) { M3 CirSen }
CirifS->if ( BoolE ) { M3 CirSen } N0 else { M3 CirSen }
CirifS->if ( BoolE ) { M3 CirSen } N0 else M3 CirifS
Condop->>
Condop->>=
Condop-><
Condop-><=
Condop->==
Condop->!=
Const->intConst
Const->stringConst
Const->floatConst
Const->charConst
Type->int
Type->float
Type->char
M0->@null
M1->@null
M2->@null
M3->@null
N0->@null