Start->FuncList
FuncList->FuncDef FuncList
FuncList->@null
FuncDef->Type id ( ParaList ) { Sen return Expr ; }
ParaList->@null
ParaList->Type id
ParaList->Type id , ParaList1
ParaList1->Type id
ParaList1->Type id , ParaList1
Sen->DeclareS Sen
Sen->AssignS Sen
Sen->IfS Sen
Sen->WhileS Sen
Sen->@null
Sen->id ( CallParaList ) ; Sen
CallParaList->@null
CallParaList->id
CallParaList->id , CallParaList1
CallParaList1->id
CallParaList1->id , CallParaList1
DeclareS->Type Idlist ;
Idlist->Id1
Idlist->Id2
Idlist->Id3
Idlist->Id1 , Idlist
Idlist->Id2 , Idlist
Idlist->Id3 , Idlist
Id1->id
Id2->id = Expr
Id3->id [ intConst ]
AssignS->id = Expr ;
Expr->Expr + Expr1
Expr->Expr - Expr1
Expr->Expr1
Expr1->Expr1 * Expr2
Expr1->Expr1 / Expr2
Expr1->Expr2
Expr2->( Expr )
Expr2->id
Expr2->Const
Expr2->id [ Expr ]
BoolE->BoolE1
BoolE->BoolE || BoolE1
BoolE1->BoolE2
BoolE1->BoolE1 && BoolE2
BoolE2->BoolE3
BoolE2->! BoolE3
BoolE3->( BoolE )
BoolE3->CondE
CondE->Expr Condop Expr
IfSen->Sen
IfSen->Sen return Expr ;
IfS->if ( BoolE ) { IfSen }
IfS->if ( BoolE ) { IfSen } else { IfSen }
IfS->if ( BoolE ) { IfSen } else IfS
WhileS->while ( BoolE ) { CirSen }
CirSen->DeclareS CirSen
CirSen->AssignS CirSen
CirSen->CirIfS CirSen
CirSen->WhileS CirSen
CirSen->return Expr ;
CirSen->@null
CirSen->id ( CallParaList ) ; CirSen
CirSen->break ;
CirSen->continue ;
CirIfS->if ( BoolE ) { CirSen }
CirIfS->if ( BoolE ) { CirSen } else { CirSen }
CirIfS->if ( BoolE ) { CirSen } else CirIfS
Condop->>
Condop->>=
Condop-><
Condop-><=
Condop->=
Condop->==
Condop->!=
Const->intConst
Const->floatConst
Const->stringConst
Const->charConst
Type->int
Type->float
Type->string
Type->char